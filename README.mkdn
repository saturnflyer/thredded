# Thredded [![Code Climate](https://codeclimate.com/github/jayroh/thredded/badges/gpa.svg)](https://codeclimate.com/github/jayroh/thredded) [![Travis-CI](https://api.travis-ci.org/jayroh/thredded.svg?branch=master)](https://travis-ci.org/jayroh/thredded/) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/jayroh/thredded?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

_Thredded_ is a rails 4+ forum/messageboard engine. Its goal is to be as
simple and feature rich as possible.

If you're looking for variations on a theme - see [Discourse], [Forem],
[Tectura] or [Heterotic Beast]. The last two are forks from Rick Olsen
and Courtenay's [Altered Beast]. Of those it should be noted that Forem
is an engine - not a standalone app.

<a href='https://pledgie.com/campaigns/27480'><img alt='Click here to lend your support to: Thredded and make a donation at pledgie.com !' src='https://pledgie.com/campaigns/27480.png?skin_name=chrome' border='0' ></a>

<img src="http://emoji.fileformat.info/gemoji/point_up.png" width="24"> If you are so inclined, donating to the project will help aid in its development

[Discourse]: http://www.discourse.org/
[Forem]: https://www.github.com/radar/forem
[Tectura]: https://github.com/caelum/tectura
[Heterotic Beast]: https://github.com/distler/heterotic_beast
[Altered Beast]: https://www.github.com/courtenay/altered_beast

## Installation

Add the gem to your Gemfile:

```ruby
gem 'thredded', github: 'jayroh/thredded'
```

Add a thredded initializer to your parent app by running the install generator.
[The initializer] has detailed descriptions of all of the configuration options.

```ruby
rails generate thredded:install
```

Copy the themes (views and assets) into your parent application (if you want to use a theme) and set the theme in your config.

```
rails generate thredded:themes
```

In `config/initializers/thredded.rb` add the name of the theme as a symbol:

```
Thredded.theme = :default
```



Copy the migrations over to your parent application and migrate:

```
rake thredded:install:migrations db:migrate db:test:prepare
```

Mount the thredded engine in your routes file:

```
mount Thredded::Engine => '/forum'
```

[The initializer]: https://github.com/jayroh/thredded/blob/master/lib/generators/thredded/install/templates/initializer.rb


## Gem development dependencies

To be more clear - these are some dependencies for when you are working on *this* gem. Not for when you are implementing it into your Rails app.

* PostgreSQL & MySQL - `brew install postgres mysql`

If and when you generate new migrations for thredded there will be three database migrations and one schema dump you will want to run.

1. `DB=mysql2 bundle exec rake db:migrate`
2. `DB=postgresql bundle exec rake db:migrate`
3. `RAILS_ENV=test bundle exec rake db:migrate`
4. `bundle exec rake db:schema:dump`

The first two are to generate the db schemas for both postgres and mysql, the third is to migrate your local test database, and the last is to take that schema information and save it to the two schema files (for when it tests against PG and MySql)

*OR* you can just run `bin/migrate`!

## Background Job Requirements

This gem has several gem agnostic background jobs. Currently resque, sidekiq, delayed_job, and a threaded in-memory queue are supported thanks to [Richard Schneeman's Q gem](https://github.com/schneems/Q). The configuration detailed above allows you to specify which job queue you prefer with `Thredded.queue_backend`. The available options are one of the following symbols - `:threaded_in_memory_queue`, `:sidekiq`, `:resque`, or `:delayed_job`.

When using the threaded in-memory queue you may *optionally* update its log-level for more granular debugging with the `Thredded.queue_memory_log_level` setting.

When running the app in a test environment you may want to set your queue to run the jobs inline. In your config you may want to set the option based on environment. EG:

```ruby
Thredded.queue_inline = Rails.env.test?
```

## Get Your Parent App Ready

There are a few things you need in your app to get things looking just right.

1. Add a to_s method to your user model. The following example assumes a column in my user model called `name`:

  ```ruby
  class User < ActiveRecord::Base
    def to_s
      name
    end
  end
  ```

2. Change the installed and active thredded theme to match your parent app's look and feel.

  The theme has very basic styles and markup. The main focus in building this theme was
  to get the front-end views and assets to a point that are easily adjusted and
  optimally organized.

  A couple of notes:

  * NOTE: You must install and activate a theme before it will be used.
  * When using route helpers in the thredded views -- eg: `new_session_path`, et al -- make
    sure to prepend `main_app` to the helper: `main_app.new_session_path` as rails engines
    like thredded will not know about those routes' existence unless explicitly told so.
  * The theme layout has three content_tags available to yield - `:thredded_page_title`,
    `:thredded_page_id`, and `:thredded_javascript`. The views within thredded pass those
    up through to your layout if you would like to use them.  Example layout:

  ```html
  <html>
    <head>
    <title>My Application | <%= yield :thredded_page_title %></title>
    </head>
    <body id="<%= yield :thredded_page_id %>">
      <%= yield %>

      <%= yield :thredded_javascript %>
    </body>
  </html>
  ```

3. Make you, or one of your users, a super-admin so they'll have the permissions to create a new forum.

  ```
  rake thredded:superadmin[yourusername] # bash
  rake "thredded:superadmin[yourusername]" # zsh
  ```

  Two examples are given for bash and zsh. Zsh typically reserves brackets, `[]`, for other uses
  hence the wrapping with quotes. Pro-tip: did you know [you can escape the brackets by
  default](http://kinopyo.com/blog/escape-square-bracket-by-default-in-zsh/)?

## Developing and Testing with [Docker Compose](http://docs.docker.com/compose/)

To quickly try out _Thredded_ with the included dummy app, clone the source and
start the included docker-compose.yml file with:

```
docker-compose build
docker-compose up -d
```

The above will build and run everything, daemonized, resulting in a running
instance on port 9292. Running `docker-compose log` will let you know when
everything is up and running. Editing the source on your host machine will
be reflected in the running docker'ized application.

Note that when using [boot2docker](https://github.com/boot2docker/boot2docker)
on a Mac make sure you visit the boot2docker host ip at
`http://$(boot2docker ip):9292`.

After booting up the containers you can run the test suite with the following:

```
docker-compose run web bundle exec rake
```

